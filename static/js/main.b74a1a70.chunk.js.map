{"version":3,"sources":["components/ResetTickTacToe.js","components/Game.js","components/RadioButton.js","components/TicTakToe.js","App.js","serviceWorker.js","index.js"],"names":["ResetTickTacToe","props","resetGame","bind","this","onClick","Component","Game","state","box","markTurnHandler","e","nextProps","setState","border","className","id","RadioButton","selectedOption","selected","selectRadioButton","event","changeGameMode","target","value","type","checked","onChange","player","human","blank","undefined","machine","TicTakToe","winnerPlayer","turn","handleOptionChange","boxClickedId","updatedBoxValue","result","checkWinner","alert","botMove","changeTurn","validateBox","finalBotMove","bestScore","Infinity","i","newBox","answer","miniMax","winner","boxValidation","isMaximizing","board","score","checkDraw","isBoxFull","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b74a1a70.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass ResetTickTacToe extends Component {\n    constructor(props){\n        super(props);\n        this.resetGame = this.resetGame.bind(this);\n    }\n    resetGame(){\n        this.props.resetGame();\n    }\n    render() {\n        return (\n            <div>\n                <button onClick={this.resetGame}>Reset</button>\n            </div>\n        )\n    }\n}\n\nexport default ResetTickTacToe\n","import React, { Component } from 'react'\nimport './css/TicTacToe.css'\nclass Game extends Component {\n    constructor(props){\n        super(props);\n        this.state={\n            box : this.props.box\n        }\n        this.markTurnHandler = this.markTurnHandler.bind(this);\n    }\n    markTurnHandler(e){\n        this.props.markTurnHandler(e);\n    }\n    componentWillReceiveProps(nextProps){\n        this.setState({ box: nextProps.box });  \n    }\n    render() {\n        return (\n            <div>\n                <table border = \"1px\" className =\"Center\"> \n                    <tr>\n                        <td id =\"1\" className = \"Square\" onClick={this.markTurnHandler}>{this.state.box[0]}</td>\n                        <td id =\"2\" className = \"Square\" onClick={this.markTurnHandler}>{this.state.box[1]}</td>\n                        <td id =\"3\" className = \"Square\" onClick={this.markTurnHandler} >{this.state.box[2]}</td>\n                    </tr>\n                    <tr>\n                        <td id =\"4\" className = \"Square\" onClick={this.markTurnHandler} >{this.state.box[3]}</td>\n                        <td id =\"5\" className = \"Square\" onClick={this.markTurnHandler} >{this.state.box[4]}</td>\n                        <td id =\"6\" className = \"Square\" onClick={this.markTurnHandler} >{this.state.box[5]}</td>\n                    </tr>\n                    <tr>\n                        <td id =\"7\" className = \"Square\" onClick={this.markTurnHandler} >{this.state.box[6]}</td>\n                        <td id =\"8\" className = \"Square\" onClick={this.markTurnHandler} >{this.state.box[7]}</td>\n                        <td id =\"9\" className = \"Square\" onClick={this.markTurnHandler} >{this.state.box[8]}</td>\n                    </tr>\n                </table>\n            </div>\n        )\n    }\n}\n\nexport default Game\n","import React, { Component } from 'react'\n\nclass RadioButton extends Component {\n    constructor(props){\n        super(props);\n        this.state={\n            selectedOption : props.selected\n        }\n        this.selectRadioButton = this.selectRadioButton.bind(this);\n    }\n    selectRadioButton(event){\n        this.props.changeGameMode(event.target.value);\n        this.setState({\n            selectedOption : event.target.value\n        })\n    }\n   \n    render() {\n        return (\n            <div>\n                <form>\n                <div className=\"radio\">\n                <label>\n                    <input type=\"radio\" value=\"BOT\" \n                                checked={this.state.selectedOption === 'BOT'} \n                                onChange={this.selectRadioButton} />\n                   BOT\n                </label>\n                </div>\n                <div className=\"radio\">\n                <label>\n                    <input type=\"radio\" value=\"HUMAN\" \n                                checked={this.state.selectedOption === 'HUMAN'} \n                                onChange={this.selectRadioButton} />\n                    HUMAN\n                </label>\n                </div>\n            </form>\n            </div>\n        )\n    }\n}\n\nexport default RadioButton\n","import React, { Component } from 'react'\nimport './css/TicTacToe.css'     \nimport ResetTickTacToe from './ResetTickTacToe';\nimport Game from './Game'\nimport RadioButton from './RadioButton';\nconst player = {\n    human : \"X\",\n    blank : undefined,\n    machine : \"O\",\n}\nclass TicTakToe extends Component {\n    constructor(){\n        super();\n        this.state= {\n            box :[],\n            winnerPlayer :\"\",\n            turn : player.human,\n            selectedOption : \"BOT\"\n        }\n        this.markTurnHandler = this.markTurnHandler.bind(this);\n        this.resetGame = this.resetGame.bind(this);\n        this.handleOptionChange = this.handleOptionChange.bind(this);\n    }\n   \n    resetGame(){\n        // let turn = player.human;\n        // if(Math.random() > 0.5){\n        //     turn = player.machine;\n        // }\n        this.setState({\n            box :[],\n            winnerPlayer : \"\",\n            turn : player.human\n        })\n    }\n    markTurnHandler(e){\n        var boxClickedId = e.target.id - 1;\n        if(  this.state.box[boxClickedId] !== player.blank ||\n             this.state.winnerPlayer !== \"\"){\n            alert(\"This Move Is Not Allowed\");\n            return;\n        }\n        var updatedBoxValue = this.state.box;\n        updatedBoxValue[boxClickedId] = this.state.turn;\n        this.setState({\n             box : updatedBoxValue\n        })\n        let result = this.checkWinner();  \n        if(result && result !== player.undefined){\n            this.setState({\n                winnerPlayer : result\n            })\n            alert(\"Player \" + result +\" is the winner\");\n            return;\n        }\n        else if(result === player.undefined){\n            alert(\"It is a tie\");\n            return;\n        }\n        if(this.state.selectedOption === \"BOT\")\n            this.botMove(this.state.box);\n        else\n            this.changeTurn();\n        \n    }\n\n    botMove(validateBox){\n        let bestScore = -Infinity;\n                let finalBotMove ;\n                for(let i =0;i<9 ;i++){\n                    if(validateBox[i] === player.blank){\n                        let newBox = [...validateBox];\n                        newBox[i]= player.machine;\n                        let answer  = this.miniMax(newBox,false);\n                        if(answer > bestScore){\n                            bestScore = answer;\n                            finalBotMove=i;\n                        }\n                    }\n                }\n                let winner = \"\";\n                validateBox[finalBotMove]=player.machine;\n                if(this.boxValidation(validateBox,player.machine)){\n                    winner = player.machine; \n                }\n                this.setState({\n                    box:validateBox,\n                    winnerPlayer:winner\n                })\n                if(winner !== \"\")\n                    alert(\"Bot WIN\");\n    }\n    miniMax(box,isMaximizing){\n        if(this.boxValidation(box,player.machine)){\n            return 1;\n        }\n        if(this.boxValidation(box,player.human)){\n            return -1;\n        }\n\n        if (isMaximizing) {\n            let bestScore = -Infinity;\n            for (let i = 0; i < 9; i++) {\n                let board = [...box];\n                if (board[i] === player.blank) {\n                  board[i] = player.machine;\n                  let score = this.miniMax(board,false);\n                  if(score > bestScore){\n                      bestScore = score;\n                  }\n                }\n            }\n            return bestScore === -Infinity ? 0:bestScore;\n          } else {\n            let bestScore = Infinity;\n            for (let i = 0; i < 9; i++) {\n                let board = [...box];\n                if (board[i] ===  player.blank) {\n                  board[i] = player.human;\n                  let score = this.miniMax(board, true);\n                  if(bestScore > score){\n                      bestScore = score;\n                  }\n                }\n            }\n            return bestScore === Infinity ? 0 :bestScore;\n          }\n        }\n        \n    checkWinner(){\n        let validateBox = [...this.state.box];\n        let turn = this.state.turn;\n        if(this.boxValidation(validateBox,turn)){\n            return turn;\n            }\n            else if(this.checkDraw(validateBox)){\n                return player.blank;\n            }\n            return null;\n    }\n\n    boxValidation(validateBox,turn){\n        if((validateBox[0] === validateBox[3] && validateBox[0] === validateBox[6] && turn === validateBox[0]) ||\n        (validateBox[1] === validateBox[4] && validateBox[1] === validateBox[7] && validateBox[1] === turn )||\n        (validateBox[2] === validateBox[5] && validateBox[2] === validateBox[8] && validateBox[2] === turn) ||\n        (validateBox[0] === validateBox[4] && validateBox[0] === validateBox[8] && validateBox[0] === turn) ||\n        (validateBox[2] === validateBox[4] && validateBox[2] === validateBox[6] && validateBox[2] === turn) ||\n        (validateBox[0] === validateBox[1] && validateBox[0] === validateBox[2] && validateBox[0] === turn) ||\n        (validateBox[3] === validateBox[4] && validateBox[3] === validateBox[5] && validateBox[3] === turn) ||\n        (validateBox[6] === validateBox[7] && validateBox[6] === validateBox[8] && validateBox[6] === turn))\n            return true;\n        return false;\n    }\n    checkDraw(box){\n        let isBoxFull = true;\n        for(let i = 0 ;i< 9 ;i++){\n                if(box[i] === player.blank){\n                    isBoxFull = false;\n                    break;\n                }\n        }\n        return isBoxFull;\n    }\n    changeTurn(){\n        if(this.state.turn === player.human)\n        {\n            this.setState({\n                turn : player.machine\n            })\n        }else{\n            this.setState({\n                turn : player.human\n            })\n        }\n    }\n    handleOptionChange(value) {\n        this.setState({\n          selectedOption: value\n        })\n    }\n    render() {\n        return (\n            <div className =\"center\">\n                <h1>Unbeatable Tic Tac Toe B!tch</h1>\n                <p>player {this.state.turn} turn </p>\n                 <Game box={this.state.box} markTurnHandler={this.markTurnHandler}></Game>\n                <ResetTickTacToe resetGame={this.resetGame}></ResetTickTacToe>\n                <RadioButton changeGameMode={this.handleOptionChange} selected={this.state.selectedOption}/>\n            </div>\n        )\n    }\n}\n\nexport default TicTakToe \n","import React from 'react';\nimport './App.css';\nimport TicTakToe from './components/TicTakToe';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <TicTakToe/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}