{"version":3,"sources":["components/ResetTickTacToe.js","components/Game.js","components/TicTakToe.js","App.js","serviceWorker.js","index.js"],"names":["ResetTickTacToe","props","resetGame","bind","this","onClick","Component","Game","state","box","markTurnHandler","e","nextProps","setState","border","className","id","TicTakToe","winnerPlayer","turn","Math","random","boxClickedId","target","undefined","updatedBoxValue","checkWinner","alert","validateBox","changeTurn","class","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d75bf276.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass ResetTickTacToe extends Component {\n    constructor(props){\n        super(props);\n        this.resetGame = this.resetGame.bind(this);\n    }\n    resetGame(){\n        this.props.resetGame();\n    }\n    render() {\n        return (\n            <div>\n                <button onClick={this.resetGame}>Reset</button>\n            </div>\n        )\n    }\n}\n\nexport default ResetTickTacToe\n","import React, { Component } from 'react'\nimport './css/TicTacToe.css'\nclass Game extends Component {\n    constructor(props){\n        super(props);\n        this.state={\n            box : this.props.box\n        }\n        this.markTurnHandler = this.markTurnHandler.bind(this);\n    }\n    markTurnHandler(e){\n        this.props.markTurnHandler(e);\n    }\n    componentWillReceiveProps(nextProps){\n        this.setState({ box: nextProps.box });  \n    }\n    render() {\n        return (\n            <div>\n                <table border = \"1px\" className =\"Center\"> \n                    <tr>\n                        <td id =\"1\" className = \"Square\" onClick={this.markTurnHandler}>{this.state.box[0]}</td>\n                        <td id =\"2\" className = \"Square\" onClick={this.markTurnHandler}>{this.state.box[1]}</td>\n                        <td id =\"3\" className = \"Square\" onClick={this.markTurnHandler} >{this.state.box[2]}</td>\n                    </tr>\n                    <tr>\n                        <td id =\"4\" className = \"Square\" onClick={this.markTurnHandler} >{this.state.box[3]}</td>\n                        <td id =\"5\" className = \"Square\" onClick={this.markTurnHandler} >{this.state.box[4]}</td>\n                        <td id =\"6\" className = \"Square\" onClick={this.markTurnHandler} >{this.state.box[5]}</td>\n                    </tr>\n                    <tr>\n                        <td id =\"7\" className = \"Square\" onClick={this.markTurnHandler} >{this.state.box[6]}</td>\n                        <td id =\"8\" className = \"Square\" onClick={this.markTurnHandler} >{this.state.box[7]}</td>\n                        <td id =\"9\" className = \"Square\" onClick={this.markTurnHandler} >{this.state.box[8]}</td>\n                    </tr>\n                </table>\n            </div>\n        )\n    }\n}\n\nexport default Game\n","import React, { Component } from 'react'\nimport './css/TicTacToe.css'     \nimport ResetTickTacToe from './ResetTickTacToe';\nimport Game from './Game'\nclass TicTakToe extends Component {\n    constructor(){\n        super();\n        this.state= {\n            box :[],\n            winnerPlayer :\"\",\n            turn : \"X\"\n        }\n        this.markTurnHandler = this.markTurnHandler.bind(this);\n        this.resetGame = this.resetGame.bind(this);\n    }\n    resetGame(){\n        let turn = \"X\";\n        if(Math.random() > 0.5){\n            turn = \"O\"\n        }\n        this.setState({\n            box :[],\n            winnerPlayer : \"\",\n            turn : turn\n        })\n    }\n    markTurnHandler(e){\n        var boxClickedId = e.target.id - 1;\n        if(  this.state.box[boxClickedId] !== undefined ||\n             this.state.winnerPlayer !== \"\"){\n            alert(\"This Move Is Not Allowed\");\n            return;\n        }\n        var updatedBoxValue = this.state.box;\n        updatedBoxValue[boxClickedId] = this.state.turn;\n        this.setState({\n             box : updatedBoxValue\n        },() => this.checkWinner())  \n    }\n    checkWinner(){\n        let validateBox = this.state.box;\n        let turn = this.state.turn;\n        if((validateBox[0] === validateBox[3] && validateBox[0] === validateBox[6] && turn === validateBox[0]) ||\n            (validateBox[1] === validateBox[4] && validateBox[1] === validateBox[7] && validateBox[1] === turn )||\n            (validateBox[2] === validateBox[5] && validateBox[2] === validateBox[8] && validateBox[2] === turn) ||\n            (validateBox[0] === validateBox[4] && validateBox[0] === validateBox[8] && validateBox[0] === turn) ||\n            (validateBox[2] === validateBox[4] && validateBox[2] === validateBox[6] && validateBox[2] === turn) ||\n            (validateBox[0] === validateBox[1] && validateBox[0] === validateBox[2] && validateBox[0] === turn) ||\n            (validateBox[3] === validateBox[4] && validateBox[3] === validateBox[5] && validateBox[3] === turn) ||\n            (validateBox[6] === validateBox[7] && validateBox[6] === validateBox[8] && validateBox[6] === turn)){\n                this.setState({\n                    winnerPlayer : turn\n                })\n                alert(\"Player \" + turn +\" is the winner\");\n            }\n            else{\n                this.changeTurn();\n            }\n\n    }\n    changeTurn(){\n        if(this.state.turn === \"X\")\n        {\n            this.setState({\n                turn : \"O\"\n            })\n        }else{\n            this.setState({\n                turn : \"X\"\n            })\n        }\n    }\n    render() {\n        return (\n            <div class =\"center\">\n                <h1>Tic Tac Toe</h1>\n                <p>player {this.state.turn} turn </p>\n                 <Game box={this.state.box} markTurnHandler={this.markTurnHandler}></Game>\n                <ResetTickTacToe resetGame={this.resetGame}></ResetTickTacToe>\n            </div>\n        )\n    }\n}\n\nexport default TicTakToe\n","import React from 'react';\nimport './App.css';\nimport TicTakToe from './components/TicTakToe';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <TicTakToe/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}