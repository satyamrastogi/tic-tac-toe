{"version":3,"sources":["components/ResetTickTacToe.js","components/Game.js","components/RadioButton.js","components/TicTakToe.js","App.js","serviceWorker.js","index.js"],"names":["ResetTickTacToe","props","resetGame","bind","this","className","onClick","Component","Game","state","box","markTurnHandler","e","nextProps","setState","id","RadioButton","selectedOption","selected","selectRadioButton","event","changeGameMode","target","value","type","checked","onChange","player","human","blank","undefined","machine","TicTakToe","winnerPlayer","turn","handleOptionChange","boxClickedId","updatedBoxValue","result","checkWinner","alert","botMove","changeTurn","validateBox","finalBotMove","bestScore","Infinity","i","newBox","answer","miniMax","winner","boxValidation","isMaximizing","board","score","checkDraw","isBoxFull","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.62aa4d7e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './css/TicTacToe.css';\n\nclass ResetTickTacToe extends Component {\n    constructor(props){\n        super(props);\n        this.resetGame = this.resetGame.bind(this);\n    }\n    resetGame(){\n        this.props.resetGame();\n    }\n    render() {\n        return (\n            <div>\n                <button className=\"btn\"  onClick={this.resetGame}>Reset</button>\n            </div>\n        )\n    }\n}\n\nexport default ResetTickTacToe\n","import React, { Component } from 'react'\nimport './css/TicTacToe.css'\nclass Game extends Component {\n    constructor(props){\n        super(props);\n        this.state={\n            box : this.props.box,\n        }\n        this.markTurnHandler = this.markTurnHandler.bind(this);\n    }\n    markTurnHandler(e){        \n        this.props.markTurnHandler(e);\n    }\n    componentWillReceiveProps(nextProps){\n        this.setState({ box: nextProps.box });  \n    }\n   \n    render() {\n        // debugger;\n        return (\n            <div className=\"tic-toe-box\">\n                {/* <table border = \"1px\" className =\"Center\"> \n                    <tr>\n                        <td id =\"1\" className = \"Square\" onClick={this.markTurnHandler}>{this.state.box[0]}</td>\n                        <td id =\"2\" className = \"Square\" onClick={this.markTurnHandler}>{this.state.box[1]}</td>\n                        <td id =\"3\" className = \"Square\" onClick={this.markTurnHandler} >{this.state.box[2]}</td>\n                    </tr>\n                    <tr>\n                        <td id =\"4\" className = \"Square\" onClick={this.markTurnHandler} >{this.state.box[3]}</td>\n                        <td id =\"5\" className = \"Square\" onClick={this.markTurnHandler} >{this.state.box[4]}</td>\n                        <td id =\"6\" className = \"Square\" onClick={this.markTurnHandler} >{this.state.box[5]}</td>\n                    </tr>\n                    <tr>\n                        <td id =\"7\" className = \"Square\" onClick={this.markTurnHandler} >{this.state.box[6]}</td>\n                        <td id =\"8\" className = \"Square\" onClick={this.markTurnHandler} >{this.state.box[7]}</td>\n                        <td id =\"9\" className = \"Square\" onClick={this.markTurnHandler} >{this.state.box[8]}</td>\n                    </tr>\n                </table> */}\n\n                <div className= {`box1 ${this.state.box[0]==='X'? 'Xcolor': this.state.box[0]==='O'? 'Ocolor': ''}`} id =\"1\" onClick={this.markTurnHandler}>{this.state.box[0]}</div>\n                <div className= {`box2 ${this.state.box[1]==='X'? 'Xcolor': this.state.box[1]==='O'? 'Ocolor':''}`} id =\"2\" onClick={this.markTurnHandler}>{this.state.box[1]}</div>\n                <div className= {`box3 ${this.state.box[2]==='X'? 'Xcolor': this.state.box[2]==='O'? 'Ocolor':''} `} id =\"3\"  onClick={this.markTurnHandler}>{this.state.box[2]}</div>\n                <div className= {`box4 ${this.state.box[3]==='X'? 'Xcolor': this.state.box[3]==='O'? 'Ocolor':''}`} id =\"4\" onClick={this.markTurnHandler}> {this.state.box[3]}</div>\n                <div className= {`box5 ${this.state.box[4]==='X'? 'Xcolor': this.state.box[4]==='O'? 'Ocolor':''}`} id =\"5\" onClick={this.markTurnHandler}>{this.state.box[4]}</div>\n                <div className= {`box6 ${this.state.box[5]==='X'? 'Xcolor': this.state.box[5]==='O'? 'Ocolor':''}`} id =\"6\" onClick={this.markTurnHandler}>{this.state.box[5]}</div>\n                <div className= {`box7 ${this.state.box[6]==='X'? 'Xcolor': this.state.box[6]==='O'? 'Ocolor':''}`} id =\"7\" onClick={this.markTurnHandler}> {this.state.box[6]}</div>\n                <div className= {`box8 ${this.state.box[7]==='X'? 'Xcolor': this.state.box[7]==='O'? 'Ocolor':''}`} id =\"8\" onClick={this.markTurnHandler}>{this.state.box[7]}</div>\n                <div className= {`box9 ${this.state.box[8]==='X'? 'Xcolor': this.state.box[8]==='O'? 'Ocolor':''}`} id =\"9\" onClick={this.markTurnHandler}>{this.state.box[8]}</div>\n            </div>\n        )\n    }\n}\n\nexport default Game\n","import React, { Component } from \"react\";\n\nclass RadioButton extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedOption: props.selected,\n    };\n    this.selectRadioButton = this.selectRadioButton.bind(this);\n  }\n  selectRadioButton(event) {\n    this.props.changeGameMode(event.target.value);\n    this.setState({\n      selectedOption: event.target.value,\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"radiobtn\">\n        <div className=\"radio1\">\n          <label>\n            <input\n              type=\"radio\"\n              value=\"BOT\"\n              checked={this.state.selectedOption === \"BOT\"}\n              onChange={this.selectRadioButton}\n            />\n            BOT\n          </label>\n        </div>\n        <div className=\"radio2\">\n          <label>\n            <input\n              type=\"radio\"\n              value=\"HUMAN\"\n              checked={this.state.selectedOption === \"HUMAN\"}\n              onChange={this.selectRadioButton}\n            />\n            HUMAN\n          </label>\n        </div>\n        {/* </form> */}\n      </div>\n    );\n  }\n}\n\nexport default RadioButton;\n","import React, { Component } from \"react\";\nimport \"./css/TicTacToe.css\";\nimport ResetTickTacToe from \"./ResetTickTacToe\";\nimport Game from \"./Game\";\nimport RadioButton from \"./RadioButton\";\n\nconst player = {\n  human: \"X\",\n  blank: undefined,\n  machine: \"O\",\n};\nclass TicTakToe extends Component {\n  constructor() {\n    super();\n    this.state = {\n      box: [],\n      winnerPlayer: \"\",\n      turn: player.human,\n      selectedOption: \"BOT\",\n    };\n    this.markTurnHandler = this.markTurnHandler.bind(this);\n    this.resetGame = this.resetGame.bind(this);\n    this.handleOptionChange = this.handleOptionChange.bind(this);\n  }\n\n  resetGame() {\n    // let turn = player.human;\n    // if(Math.random() > 0.5){\n    //     turn = player.machine;\n    // }\n    this.setState({\n      box: [],\n      winnerPlayer: \"\",\n      turn: player.human,\n    });\n  }\n  markTurnHandler(e) {\n    var boxClickedId = e.target.id - 1;\n    if (\n      this.state.box[boxClickedId] !== player.blank ||\n      this.state.winnerPlayer !== \"\"\n    ) {\n      alert(\"this move is not valid\");\n      return;\n    }\n    var updatedBoxValue = this.state.box;\n    updatedBoxValue[boxClickedId] = this.state.turn;\n    this.setState({\n      box: updatedBoxValue,\n    });\n    let result = this.checkWinner();\n    if (result && result !== player.undefined) {\n      this.setState({\n        winnerPlayer: result,\n      });\n      alert(\"Player \" + result + \" is the winner\");\n      return;\n    } else if (result === player.undefined) {\n      alert(\"It is a tie\");\n      return;\n    }\n    if (this.state.selectedOption === \"BOT\") this.botMove(this.state.box);\n    else this.changeTurn();\n  }\n\n  botMove(validateBox) {\n    let bestScore = -Infinity;\n    let finalBotMove;\n    for (let i = 0; i < 9; i++) {\n      if (validateBox[i] === player.blank) {\n        let newBox = [...validateBox];\n        newBox[i] = player.machine;\n        let answer = this.miniMax(newBox, false);\n        if (answer > bestScore) {\n          bestScore = answer;\n          finalBotMove = i;\n        }\n      }\n    }\n    let winner = \"\";\n    validateBox[finalBotMove] = player.machine;\n    if (this.boxValidation(validateBox, player.machine)) {\n      winner = player.machine;\n    }\n    this.setState({\n      box: validateBox,\n      winnerPlayer: winner,\n    });\n    if (winner !== \"\") alert(\"Bot WIN\");\n  }\n  miniMax(box, isMaximizing) {\n    if (this.boxValidation(box, player.machine)) {\n      return 1;\n    }\n    if (this.boxValidation(box, player.human)) {\n      return -1;\n    }\n\n    if (isMaximizing) {\n      let bestScore = -Infinity;\n      for (let i = 0; i < 9; i++) {\n        let board = [...box];\n        if (board[i] === player.blank) {\n          board[i] = player.machine;\n          let score = this.miniMax(board, false);\n          if (score > bestScore) {\n            bestScore = score;\n          }\n        }\n      }\n      return bestScore === -Infinity ? 0 : bestScore;\n    } else {\n      let bestScore = Infinity;\n      for (let i = 0; i < 9; i++) {\n        let board = [...box];\n        if (board[i] === player.blank) {\n          board[i] = player.human;\n          let score = this.miniMax(board, true);\n          if (bestScore > score) {\n            bestScore = score;\n          }\n        }\n      }\n      return bestScore === Infinity ? 0 : bestScore;\n    }\n  }\n\n  checkWinner() {\n    let validateBox = [...this.state.box];\n    let turn = this.state.turn;\n    if (this.boxValidation(validateBox, turn)) {\n      return turn;\n    } else if (this.checkDraw(validateBox)) {\n      return player.blank;\n    }\n    return null;\n  }\n\n  boxValidation(validateBox, turn) {\n    if (\n      (validateBox[0] === validateBox[3] &&\n        validateBox[0] === validateBox[6] &&\n        turn === validateBox[0]) ||\n      (validateBox[1] === validateBox[4] &&\n        validateBox[1] === validateBox[7] &&\n        validateBox[1] === turn) ||\n      (validateBox[2] === validateBox[5] &&\n        validateBox[2] === validateBox[8] &&\n        validateBox[2] === turn) ||\n      (validateBox[0] === validateBox[4] &&\n        validateBox[0] === validateBox[8] &&\n        validateBox[0] === turn) ||\n      (validateBox[2] === validateBox[4] &&\n        validateBox[2] === validateBox[6] &&\n        validateBox[2] === turn) ||\n      (validateBox[0] === validateBox[1] &&\n        validateBox[0] === validateBox[2] &&\n        validateBox[0] === turn) ||\n      (validateBox[3] === validateBox[4] &&\n        validateBox[3] === validateBox[5] &&\n        validateBox[3] === turn) ||\n      (validateBox[6] === validateBox[7] &&\n        validateBox[6] === validateBox[8] &&\n        validateBox[6] === turn)\n    )\n      return true;\n    return false;\n  }\n  checkDraw(box) {\n    let isBoxFull = true;\n    for (let i = 0; i < 9; i++) {\n      if (box[i] === player.blank) {\n        isBoxFull = false;\n        break;\n      }\n    }\n    return isBoxFull;\n  }\n  changeTurn() {\n    if (this.state.turn === player.human) {\n      this.setState({\n        turn: player.machine,\n      });\n    } else {\n      this.setState({\n        turn: player.human,\n      });\n    }\n  }\n  handleOptionChange(value) {\n    this.setState({\n      selectedOption: value,\n    });\n  }\n  render() {\n    return (\n      <div className=\"center\">\n        <h1>Unbeatable Tic Tac Toe B!tch</h1>\n        <p>Player {this.state.turn} turn </p>\n        <Game\n          box={this.state.box}\n          markTurnHandler={this.markTurnHandler}\n        ></Game>\n        <ResetTickTacToe resetGame={this.resetGame}></ResetTickTacToe>\n\n        <RadioButton\n          changeGameMode={this.handleOptionChange}\n          selected={this.state.selectedOption}\n        />\n      </div>\n    );\n  }\n}\n\nexport default TicTakToe;\n","import React from 'react';\nimport './App.css';\nimport TicTakToe from './components/TicTakToe';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <TicTakToe/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}